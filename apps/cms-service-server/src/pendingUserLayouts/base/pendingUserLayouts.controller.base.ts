/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PendingUserLayoutsService } from "../pendingUserLayouts.service";
import { PendingUserLayoutsCreateInput } from "./PendingUserLayoutsCreateInput";
import { PendingUserLayouts } from "./PendingUserLayouts";
import { PendingUserLayoutsFindManyArgs } from "./PendingUserLayoutsFindManyArgs";
import { PendingUserLayoutsWhereUniqueInput } from "./PendingUserLayoutsWhereUniqueInput";
import { PendingUserLayoutsUpdateInput } from "./PendingUserLayoutsUpdateInput";

export class PendingUserLayoutsControllerBase {
  constructor(protected readonly service: PendingUserLayoutsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PendingUserLayouts })
  async createPendingUserLayouts(
    @common.Body() data: PendingUserLayoutsCreateInput
  ): Promise<PendingUserLayouts> {
    return await this.service.createPendingUserLayouts({
      data: {
        ...data,

        layout: data.layout
          ? {
              connect: data.layout,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        layoutVersion: true,
        layoutSubversion: true,
        createdOn: true,
        raisedBy: true,
        authorisedBy: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PendingUserLayouts] })
  @ApiNestedQuery(PendingUserLayoutsFindManyArgs)
  async pendingUserLayoutsItems(
    @common.Req() request: Request
  ): Promise<PendingUserLayouts[]> {
    const args = plainToClass(PendingUserLayoutsFindManyArgs, request.query);
    return this.service.pendingUserLayoutsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        layoutVersion: true,
        layoutSubversion: true,
        createdOn: true,
        raisedBy: true,
        authorisedBy: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PendingUserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pendingUserLayouts(
    @common.Param() params: PendingUserLayoutsWhereUniqueInput
  ): Promise<PendingUserLayouts | null> {
    const result = await this.service.pendingUserLayouts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        layoutVersion: true,
        layoutSubversion: true,
        createdOn: true,
        raisedBy: true,
        authorisedBy: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PendingUserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePendingUserLayouts(
    @common.Param() params: PendingUserLayoutsWhereUniqueInput,
    @common.Body() data: PendingUserLayoutsUpdateInput
  ): Promise<PendingUserLayouts | null> {
    try {
      return await this.service.updatePendingUserLayouts({
        where: params,
        data: {
          ...data,

          layout: data.layout
            ? {
                connect: data.layout,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          layoutVersion: true,
          layoutSubversion: true,
          createdOn: true,
          raisedBy: true,
          authorisedBy: true,

          layout: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PendingUserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePendingUserLayouts(
    @common.Param() params: PendingUserLayoutsWhereUniqueInput
  ): Promise<PendingUserLayouts | null> {
    try {
      return await this.service.deletePendingUserLayouts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          layoutVersion: true,
          layoutSubversion: true,
          createdOn: true,
          raisedBy: true,
          authorisedBy: true,

          layout: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
