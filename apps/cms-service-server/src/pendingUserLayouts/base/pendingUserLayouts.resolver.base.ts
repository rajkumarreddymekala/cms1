/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PendingUserLayouts } from "./PendingUserLayouts";
import { PendingUserLayoutsCountArgs } from "./PendingUserLayoutsCountArgs";
import { PendingUserLayoutsFindManyArgs } from "./PendingUserLayoutsFindManyArgs";
import { PendingUserLayoutsFindUniqueArgs } from "./PendingUserLayoutsFindUniqueArgs";
import { CreatePendingUserLayoutsArgs } from "./CreatePendingUserLayoutsArgs";
import { UpdatePendingUserLayoutsArgs } from "./UpdatePendingUserLayoutsArgs";
import { DeletePendingUserLayoutsArgs } from "./DeletePendingUserLayoutsArgs";
import { Layouts } from "../../layouts/base/Layouts";
import { PendingUserLayoutsService } from "../pendingUserLayouts.service";
@graphql.Resolver(() => PendingUserLayouts)
export class PendingUserLayoutsResolverBase {
  constructor(protected readonly service: PendingUserLayoutsService) {}

  async _pendingUserLayoutsItemsMeta(
    @graphql.Args() args: PendingUserLayoutsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PendingUserLayouts])
  async pendingUserLayoutsItems(
    @graphql.Args() args: PendingUserLayoutsFindManyArgs
  ): Promise<PendingUserLayouts[]> {
    return this.service.pendingUserLayoutsItems(args);
  }

  @graphql.Query(() => PendingUserLayouts, { nullable: true })
  async pendingUserLayouts(
    @graphql.Args() args: PendingUserLayoutsFindUniqueArgs
  ): Promise<PendingUserLayouts | null> {
    const result = await this.service.pendingUserLayouts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PendingUserLayouts)
  async createPendingUserLayouts(
    @graphql.Args() args: CreatePendingUserLayoutsArgs
  ): Promise<PendingUserLayouts> {
    return await this.service.createPendingUserLayouts({
      ...args,
      data: {
        ...args.data,

        layout: args.data.layout
          ? {
              connect: args.data.layout,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PendingUserLayouts)
  async updatePendingUserLayouts(
    @graphql.Args() args: UpdatePendingUserLayoutsArgs
  ): Promise<PendingUserLayouts | null> {
    try {
      return await this.service.updatePendingUserLayouts({
        ...args,
        data: {
          ...args.data,

          layout: args.data.layout
            ? {
                connect: args.data.layout,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PendingUserLayouts)
  async deletePendingUserLayouts(
    @graphql.Args() args: DeletePendingUserLayoutsArgs
  ): Promise<PendingUserLayouts | null> {
    try {
      return await this.service.deletePendingUserLayouts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Layouts, {
    nullable: true,
    name: "layout",
  })
  async getLayout(
    @graphql.Parent() parent: PendingUserLayouts
  ): Promise<Layouts | null> {
    const result = await this.service.getLayout(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
