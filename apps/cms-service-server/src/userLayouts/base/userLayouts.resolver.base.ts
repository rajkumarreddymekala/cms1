/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserLayouts } from "./UserLayouts";
import { UserLayoutsCountArgs } from "./UserLayoutsCountArgs";
import { UserLayoutsFindManyArgs } from "./UserLayoutsFindManyArgs";
import { UserLayoutsFindUniqueArgs } from "./UserLayoutsFindUniqueArgs";
import { CreateUserLayoutsArgs } from "./CreateUserLayoutsArgs";
import { UpdateUserLayoutsArgs } from "./UpdateUserLayoutsArgs";
import { DeleteUserLayoutsArgs } from "./DeleteUserLayoutsArgs";
import { Layouts } from "../../layouts/base/Layouts";
import { UserLayoutsService } from "../userLayouts.service";
@graphql.Resolver(() => UserLayouts)
export class UserLayoutsResolverBase {
  constructor(protected readonly service: UserLayoutsService) {}

  async _userLayoutsItemsMeta(
    @graphql.Args() args: UserLayoutsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserLayouts])
  async userLayoutsItems(
    @graphql.Args() args: UserLayoutsFindManyArgs
  ): Promise<UserLayouts[]> {
    return this.service.userLayoutsItems(args);
  }

  @graphql.Query(() => UserLayouts, { nullable: true })
  async userLayouts(
    @graphql.Args() args: UserLayoutsFindUniqueArgs
  ): Promise<UserLayouts | null> {
    const result = await this.service.userLayouts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserLayouts)
  async createUserLayouts(
    @graphql.Args() args: CreateUserLayoutsArgs
  ): Promise<UserLayouts> {
    return await this.service.createUserLayouts({
      ...args,
      data: {
        ...args.data,

        layout: args.data.layout
          ? {
              connect: args.data.layout,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserLayouts)
  async updateUserLayouts(
    @graphql.Args() args: UpdateUserLayoutsArgs
  ): Promise<UserLayouts | null> {
    try {
      return await this.service.updateUserLayouts({
        ...args,
        data: {
          ...args.data,

          layout: args.data.layout
            ? {
                connect: args.data.layout,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserLayouts)
  async deleteUserLayouts(
    @graphql.Args() args: DeleteUserLayoutsArgs
  ): Promise<UserLayouts | null> {
    try {
      return await this.service.deleteUserLayouts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Layouts, {
    nullable: true,
    name: "layout",
  })
  async getLayout(
    @graphql.Parent() parent: UserLayouts
  ): Promise<Layouts | null> {
    const result = await this.service.getLayout(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
