/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserLayoutsService } from "../userLayouts.service";
import { UserLayoutsCreateInput } from "./UserLayoutsCreateInput";
import { UserLayouts } from "./UserLayouts";
import { UserLayoutsFindManyArgs } from "./UserLayoutsFindManyArgs";
import { UserLayoutsWhereUniqueInput } from "./UserLayoutsWhereUniqueInput";
import { UserLayoutsUpdateInput } from "./UserLayoutsUpdateInput";

export class UserLayoutsControllerBase {
  constructor(protected readonly service: UserLayoutsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserLayouts })
  async createUserLayouts(
    @common.Body() data: UserLayoutsCreateInput
  ): Promise<UserLayouts> {
    return await this.service.createUserLayouts({
      data: {
        ...data,

        layout: data.layout
          ? {
              connect: data.layout,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserLayouts] })
  @ApiNestedQuery(UserLayoutsFindManyArgs)
  async userLayoutsItems(
    @common.Req() request: Request
  ): Promise<UserLayouts[]> {
    const args = plainToClass(UserLayoutsFindManyArgs, request.query);
    return this.service.userLayoutsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userLayouts(
    @common.Param() params: UserLayoutsWhereUniqueInput
  ): Promise<UserLayouts | null> {
    const result = await this.service.userLayouts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserLayouts(
    @common.Param() params: UserLayoutsWhereUniqueInput,
    @common.Body() data: UserLayoutsUpdateInput
  ): Promise<UserLayouts | null> {
    try {
      return await this.service.updateUserLayouts({
        where: params,
        data: {
          ...data,

          layout: data.layout
            ? {
                connect: data.layout,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,

          layout: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserLayouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserLayouts(
    @common.Param() params: UserLayoutsWhereUniqueInput
  ): Promise<UserLayouts | null> {
    try {
      return await this.service.deleteUserLayouts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,

          layout: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
