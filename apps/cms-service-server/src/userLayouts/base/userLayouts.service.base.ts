/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserLayouts as PrismaUserLayouts,
  Layouts as PrismaLayouts,
} from "@prisma/client";

export class UserLayoutsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserLayoutsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userLayouts.count(args);
  }

  async userLayoutsItems(
    args: Prisma.UserLayoutsFindManyArgs
  ): Promise<PrismaUserLayouts[]> {
    return this.prisma.userLayouts.findMany(args);
  }
  async userLayouts(
    args: Prisma.UserLayoutsFindUniqueArgs
  ): Promise<PrismaUserLayouts | null> {
    return this.prisma.userLayouts.findUnique(args);
  }
  async createUserLayouts(
    args: Prisma.UserLayoutsCreateArgs
  ): Promise<PrismaUserLayouts> {
    return this.prisma.userLayouts.create(args);
  }
  async updateUserLayouts(
    args: Prisma.UserLayoutsUpdateArgs
  ): Promise<PrismaUserLayouts> {
    return this.prisma.userLayouts.update(args);
  }
  async deleteUserLayouts(
    args: Prisma.UserLayoutsDeleteArgs
  ): Promise<PrismaUserLayouts> {
    return this.prisma.userLayouts.delete(args);
  }

  async getLayout(parentId: string): Promise<PrismaLayouts | null> {
    return this.prisma.userLayouts
      .findUnique({
        where: { id: parentId },
      })
      .layout();
  }
}
