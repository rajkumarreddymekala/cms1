/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LayoutSectionService } from "../layoutSection.service";
import { LayoutSectionCreateInput } from "./LayoutSectionCreateInput";
import { LayoutSection } from "./LayoutSection";
import { LayoutSectionFindManyArgs } from "./LayoutSectionFindManyArgs";
import { LayoutSectionWhereUniqueInput } from "./LayoutSectionWhereUniqueInput";
import { LayoutSectionUpdateInput } from "./LayoutSectionUpdateInput";

export class LayoutSectionControllerBase {
  constructor(protected readonly service: LayoutSectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LayoutSection })
  async createLayoutSection(
    @common.Body() data: LayoutSectionCreateInput
  ): Promise<LayoutSection> {
    return await this.service.createLayoutSection({
      data: {
        ...data,

        layout: data.layout
          ? {
              connect: data.layout,
            }
          : undefined,

        section: data.section
          ? {
              connect: data.section,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        layoutVersion: true,
        content: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },

        section: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LayoutSection] })
  @ApiNestedQuery(LayoutSectionFindManyArgs)
  async layoutSections(
    @common.Req() request: Request
  ): Promise<LayoutSection[]> {
    const args = plainToClass(LayoutSectionFindManyArgs, request.query);
    return this.service.layoutSections({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        layoutVersion: true,
        content: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },

        section: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LayoutSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async layoutSection(
    @common.Param() params: LayoutSectionWhereUniqueInput
  ): Promise<LayoutSection | null> {
    const result = await this.service.layoutSection({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        layoutVersion: true,
        content: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },

        section: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LayoutSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLayoutSection(
    @common.Param() params: LayoutSectionWhereUniqueInput,
    @common.Body() data: LayoutSectionUpdateInput
  ): Promise<LayoutSection | null> {
    try {
      return await this.service.updateLayoutSection({
        where: params,
        data: {
          ...data,

          layout: data.layout
            ? {
                connect: data.layout,
              }
            : undefined,

          section: data.section
            ? {
                connect: data.section,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          layoutVersion: true,
          content: true,
          orderBy: true,
          status: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,

          layout: {
            select: {
              id: true,
            },
          },

          section: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LayoutSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLayoutSection(
    @common.Param() params: LayoutSectionWhereUniqueInput
  ): Promise<LayoutSection | null> {
    try {
      return await this.service.deleteLayoutSection({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          layoutVersion: true,
          content: true,
          orderBy: true,
          status: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,

          layout: {
            select: {
              id: true,
            },
          },

          section: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
