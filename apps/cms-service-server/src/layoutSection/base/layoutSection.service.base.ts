/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LayoutSection as PrismaLayoutSection,
  Layouts as PrismaLayouts,
  Section as PrismaSection,
} from "@prisma/client";

export class LayoutSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LayoutSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.layoutSection.count(args);
  }

  async layoutSections(
    args: Prisma.LayoutSectionFindManyArgs
  ): Promise<PrismaLayoutSection[]> {
    return this.prisma.layoutSection.findMany(args);
  }
  async layoutSection(
    args: Prisma.LayoutSectionFindUniqueArgs
  ): Promise<PrismaLayoutSection | null> {
    return this.prisma.layoutSection.findUnique(args);
  }
  async createLayoutSection(
    args: Prisma.LayoutSectionCreateArgs
  ): Promise<PrismaLayoutSection> {
    return this.prisma.layoutSection.create(args);
  }
  async updateLayoutSection(
    args: Prisma.LayoutSectionUpdateArgs
  ): Promise<PrismaLayoutSection> {
    return this.prisma.layoutSection.update(args);
  }
  async deleteLayoutSection(
    args: Prisma.LayoutSectionDeleteArgs
  ): Promise<PrismaLayoutSection> {
    return this.prisma.layoutSection.delete(args);
  }

  async getLayout(parentId: string): Promise<PrismaLayouts | null> {
    return this.prisma.layoutSection
      .findUnique({
        where: { id: parentId },
      })
      .layout();
  }

  async getSection(parentId: string): Promise<PrismaSection | null> {
    return this.prisma.layoutSection
      .findUnique({
        where: { id: parentId },
      })
      .section();
  }
}
