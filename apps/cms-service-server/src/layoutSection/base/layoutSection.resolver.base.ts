/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LayoutSection } from "./LayoutSection";
import { LayoutSectionCountArgs } from "./LayoutSectionCountArgs";
import { LayoutSectionFindManyArgs } from "./LayoutSectionFindManyArgs";
import { LayoutSectionFindUniqueArgs } from "./LayoutSectionFindUniqueArgs";
import { CreateLayoutSectionArgs } from "./CreateLayoutSectionArgs";
import { UpdateLayoutSectionArgs } from "./UpdateLayoutSectionArgs";
import { DeleteLayoutSectionArgs } from "./DeleteLayoutSectionArgs";
import { Layouts } from "../../layouts/base/Layouts";
import { Section } from "../../section/base/Section";
import { LayoutSectionService } from "../layoutSection.service";
@graphql.Resolver(() => LayoutSection)
export class LayoutSectionResolverBase {
  constructor(protected readonly service: LayoutSectionService) {}

  async _layoutSectionsMeta(
    @graphql.Args() args: LayoutSectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LayoutSection])
  async layoutSections(
    @graphql.Args() args: LayoutSectionFindManyArgs
  ): Promise<LayoutSection[]> {
    return this.service.layoutSections(args);
  }

  @graphql.Query(() => LayoutSection, { nullable: true })
  async layoutSection(
    @graphql.Args() args: LayoutSectionFindUniqueArgs
  ): Promise<LayoutSection | null> {
    const result = await this.service.layoutSection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LayoutSection)
  async createLayoutSection(
    @graphql.Args() args: CreateLayoutSectionArgs
  ): Promise<LayoutSection> {
    return await this.service.createLayoutSection({
      ...args,
      data: {
        ...args.data,

        layout: args.data.layout
          ? {
              connect: args.data.layout,
            }
          : undefined,

        section: args.data.section
          ? {
              connect: args.data.section,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LayoutSection)
  async updateLayoutSection(
    @graphql.Args() args: UpdateLayoutSectionArgs
  ): Promise<LayoutSection | null> {
    try {
      return await this.service.updateLayoutSection({
        ...args,
        data: {
          ...args.data,

          layout: args.data.layout
            ? {
                connect: args.data.layout,
              }
            : undefined,

          section: args.data.section
            ? {
                connect: args.data.section,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LayoutSection)
  async deleteLayoutSection(
    @graphql.Args() args: DeleteLayoutSectionArgs
  ): Promise<LayoutSection | null> {
    try {
      return await this.service.deleteLayoutSection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Layouts, {
    nullable: true,
    name: "layout",
  })
  async getLayout(
    @graphql.Parent() parent: LayoutSection
  ): Promise<Layouts | null> {
    const result = await this.service.getLayout(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Section, {
    nullable: true,
    name: "section",
  })
  async getSection(
    @graphql.Parent() parent: LayoutSection
  ): Promise<Section | null> {
    const result = await this.service.getSection(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
