/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Layouts } from "./Layouts";
import { LayoutsCountArgs } from "./LayoutsCountArgs";
import { LayoutsFindManyArgs } from "./LayoutsFindManyArgs";
import { LayoutsFindUniqueArgs } from "./LayoutsFindUniqueArgs";
import { CreateLayoutsArgs } from "./CreateLayoutsArgs";
import { UpdateLayoutsArgs } from "./UpdateLayoutsArgs";
import { DeleteLayoutsArgs } from "./DeleteLayoutsArgs";
import { LayoutSectionFindManyArgs } from "../../layoutSection/base/LayoutSectionFindManyArgs";
import { LayoutSection } from "../../layoutSection/base/LayoutSection";
import { UserLayoutsFindManyArgs } from "../../userLayouts/base/UserLayoutsFindManyArgs";
import { UserLayouts } from "../../userLayouts/base/UserLayouts";
import { PendingUserLayoutsFindManyArgs } from "../../pendingUserLayouts/base/PendingUserLayoutsFindManyArgs";
import { PendingUserLayouts } from "../../pendingUserLayouts/base/PendingUserLayouts";
import { LayoutsService } from "../layouts.service";
@graphql.Resolver(() => Layouts)
export class LayoutsResolverBase {
  constructor(protected readonly service: LayoutsService) {}

  async _layoutsItemsMeta(
    @graphql.Args() args: LayoutsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Layouts])
  async layoutsItems(
    @graphql.Args() args: LayoutsFindManyArgs
  ): Promise<Layouts[]> {
    return this.service.layoutsItems(args);
  }

  @graphql.Query(() => Layouts, { nullable: true })
  async layouts(
    @graphql.Args() args: LayoutsFindUniqueArgs
  ): Promise<Layouts | null> {
    const result = await this.service.layouts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Layouts)
  async createLayouts(
    @graphql.Args() args: CreateLayoutsArgs
  ): Promise<Layouts> {
    return await this.service.createLayouts({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Layouts)
  async updateLayouts(
    @graphql.Args() args: UpdateLayoutsArgs
  ): Promise<Layouts | null> {
    try {
      return await this.service.updateLayouts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Layouts)
  async deleteLayouts(
    @graphql.Args() args: DeleteLayoutsArgs
  ): Promise<Layouts | null> {
    try {
      return await this.service.deleteLayouts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LayoutSection], { name: "layoutSections" })
  async findLayoutSections(
    @graphql.Parent() parent: Layouts,
    @graphql.Args() args: LayoutSectionFindManyArgs
  ): Promise<LayoutSection[]> {
    const results = await this.service.findLayoutSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserLayouts], { name: "userLayoutsItems" })
  async findUserLayoutsItems(
    @graphql.Parent() parent: Layouts,
    @graphql.Args() args: UserLayoutsFindManyArgs
  ): Promise<UserLayouts[]> {
    const results = await this.service.findUserLayoutsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [PendingUserLayouts], {
    name: "pendingUserLayoutsItems",
  })
  async findPendingUserLayoutsItems(
    @graphql.Parent() parent: Layouts,
    @graphql.Args() args: PendingUserLayoutsFindManyArgs
  ): Promise<PendingUserLayouts[]> {
    const results = await this.service.findPendingUserLayoutsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
