/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Layouts as PrismaLayouts,
  LayoutSection as PrismaLayoutSection,
  UserLayouts as PrismaUserLayouts,
  PendingUserLayouts as PrismaPendingUserLayouts,
} from "@prisma/client";

export class LayoutsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LayoutsCountArgs, "select">): Promise<number> {
    return this.prisma.layouts.count(args);
  }

  async layoutsItems(
    args: Prisma.LayoutsFindManyArgs
  ): Promise<PrismaLayouts[]> {
    return this.prisma.layouts.findMany(args);
  }
  async layouts(
    args: Prisma.LayoutsFindUniqueArgs
  ): Promise<PrismaLayouts | null> {
    return this.prisma.layouts.findUnique(args);
  }
  async createLayouts(args: Prisma.LayoutsCreateArgs): Promise<PrismaLayouts> {
    return this.prisma.layouts.create(args);
  }
  async updateLayouts(args: Prisma.LayoutsUpdateArgs): Promise<PrismaLayouts> {
    return this.prisma.layouts.update(args);
  }
  async deleteLayouts(args: Prisma.LayoutsDeleteArgs): Promise<PrismaLayouts> {
    return this.prisma.layouts.delete(args);
  }

  async findLayoutSections(
    parentId: string,
    args: Prisma.LayoutSectionFindManyArgs
  ): Promise<PrismaLayoutSection[]> {
    return this.prisma.layouts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .layoutSections(args);
  }

  async findUserLayoutsItems(
    parentId: string,
    args: Prisma.UserLayoutsFindManyArgs
  ): Promise<PrismaUserLayouts[]> {
    return this.prisma.layouts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userLayoutsItems(args);
  }

  async findPendingUserLayoutsItems(
    parentId: string,
    args: Prisma.PendingUserLayoutsFindManyArgs
  ): Promise<PrismaPendingUserLayouts[]> {
    return this.prisma.layouts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pendingUserLayoutsItems(args);
  }
}
