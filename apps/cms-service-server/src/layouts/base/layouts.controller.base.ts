/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LayoutsService } from "../layouts.service";
import { LayoutsCreateInput } from "./LayoutsCreateInput";
import { Layouts } from "./Layouts";
import { LayoutsFindManyArgs } from "./LayoutsFindManyArgs";
import { LayoutsWhereUniqueInput } from "./LayoutsWhereUniqueInput";
import { LayoutsUpdateInput } from "./LayoutsUpdateInput";
import { LayoutSectionFindManyArgs } from "../../layoutSection/base/LayoutSectionFindManyArgs";
import { LayoutSection } from "../../layoutSection/base/LayoutSection";
import { LayoutSectionWhereUniqueInput } from "../../layoutSection/base/LayoutSectionWhereUniqueInput";
import { UserLayoutsFindManyArgs } from "../../userLayouts/base/UserLayoutsFindManyArgs";
import { UserLayouts } from "../../userLayouts/base/UserLayouts";
import { UserLayoutsWhereUniqueInput } from "../../userLayouts/base/UserLayoutsWhereUniqueInput";
import { PendingUserLayoutsFindManyArgs } from "../../pendingUserLayouts/base/PendingUserLayoutsFindManyArgs";
import { PendingUserLayouts } from "../../pendingUserLayouts/base/PendingUserLayouts";
import { PendingUserLayoutsWhereUniqueInput } from "../../pendingUserLayouts/base/PendingUserLayoutsWhereUniqueInput";

export class LayoutsControllerBase {
  constructor(protected readonly service: LayoutsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Layouts })
  async createLayouts(
    @common.Body() data: LayoutsCreateInput
  ): Promise<Layouts> {
    return await this.service.createLayouts({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        thumbnailUrl: true,
        publishedVersion: true,
        publishedSubversion: true,
        currentVersion: true,
        currentSubversion: true,
        currentVersionStatus: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Layouts] })
  @ApiNestedQuery(LayoutsFindManyArgs)
  async layoutsItems(@common.Req() request: Request): Promise<Layouts[]> {
    const args = plainToClass(LayoutsFindManyArgs, request.query);
    return this.service.layoutsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        thumbnailUrl: true,
        publishedVersion: true,
        publishedSubversion: true,
        currentVersion: true,
        currentSubversion: true,
        currentVersionStatus: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Layouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async layouts(
    @common.Param() params: LayoutsWhereUniqueInput
  ): Promise<Layouts | null> {
    const result = await this.service.layouts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        thumbnailUrl: true,
        publishedVersion: true,
        publishedSubversion: true,
        currentVersion: true,
        currentSubversion: true,
        currentVersionStatus: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Layouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLayouts(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() data: LayoutsUpdateInput
  ): Promise<Layouts | null> {
    try {
      return await this.service.updateLayouts({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          thumbnailUrl: true,
          publishedVersion: true,
          publishedSubversion: true,
          currentVersion: true,
          currentSubversion: true,
          currentVersionStatus: true,
          orderBy: true,
          status: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Layouts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLayouts(
    @common.Param() params: LayoutsWhereUniqueInput
  ): Promise<Layouts | null> {
    try {
      return await this.service.deleteLayouts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          thumbnailUrl: true,
          publishedVersion: true,
          publishedSubversion: true,
          currentVersion: true,
          currentSubversion: true,
          currentVersionStatus: true,
          orderBy: true,
          status: true,
          createdBy: true,
          authorisedBy: true,
          createdOn: true,
          authorisedOn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/layoutSections")
  @ApiNestedQuery(LayoutSectionFindManyArgs)
  async findLayoutSections(
    @common.Req() request: Request,
    @common.Param() params: LayoutsWhereUniqueInput
  ): Promise<LayoutSection[]> {
    const query = plainToClass(LayoutSectionFindManyArgs, request.query);
    const results = await this.service.findLayoutSections(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        layoutVersion: true,
        content: true,
        orderBy: true,
        status: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },

        section: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/layoutSections")
  async connectLayoutSections(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: LayoutSectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      layoutSections: {
        connect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/layoutSections")
  async updateLayoutSections(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: LayoutSectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      layoutSections: {
        set: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/layoutSections")
  async disconnectLayoutSections(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: LayoutSectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      layoutSections: {
        disconnect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userLayoutsItems")
  @ApiNestedQuery(UserLayoutsFindManyArgs)
  async findUserLayoutsItems(
    @common.Req() request: Request,
    @common.Param() params: LayoutsWhereUniqueInput
  ): Promise<UserLayouts[]> {
    const query = plainToClass(UserLayoutsFindManyArgs, request.query);
    const results = await this.service.findUserLayoutsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        createdBy: true,
        authorisedBy: true,
        createdOn: true,
        authorisedOn: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userLayoutsItems")
  async connectUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: UserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLayoutsItems: {
        connect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userLayoutsItems")
  async updateUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: UserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLayoutsItems: {
        set: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userLayoutsItems")
  async disconnectUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: UserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLayoutsItems: {
        disconnect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pendingUserLayoutsItems")
  @ApiNestedQuery(PendingUserLayoutsFindManyArgs)
  async findPendingUserLayoutsItems(
    @common.Req() request: Request,
    @common.Param() params: LayoutsWhereUniqueInput
  ): Promise<PendingUserLayouts[]> {
    const query = plainToClass(PendingUserLayoutsFindManyArgs, request.query);
    const results = await this.service.findPendingUserLayoutsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        layoutVersion: true,
        layoutSubversion: true,
        createdOn: true,
        raisedBy: true,
        authorisedBy: true,

        layout: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pendingUserLayoutsItems")
  async connectPendingUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: PendingUserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pendingUserLayoutsItems: {
        connect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pendingUserLayoutsItems")
  async updatePendingUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: PendingUserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pendingUserLayoutsItems: {
        set: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pendingUserLayoutsItems")
  async disconnectPendingUserLayoutsItems(
    @common.Param() params: LayoutsWhereUniqueInput,
    @common.Body() body: PendingUserLayoutsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pendingUserLayoutsItems: {
        disconnect: body,
      },
    };
    await this.service.updateLayouts({
      where: params,
      data,
      select: { id: true },
    });
  }
}
